/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => QuickPluginSwitcher
});
module.exports = __toCommonJS(main_exports);

// node_modules/monkey-around/mjs/index.js
function around(obj, factories) {
  const removers = Object.keys(factories).map((key) => around1(obj, key, factories[key]));
  return removers.length === 1 ? removers[0] : function() {
    removers.forEach((r) => r());
  };
}
function around1(obj, method, createWrapper) {
  const original = obj[method], hadOwn = obj.hasOwnProperty(method);
  let current = createWrapper(original);
  if (original)
    Object.setPrototypeOf(current, original);
  Object.setPrototypeOf(wrapper, current);
  obj[method] = wrapper;
  return remove;
  function wrapper(...args) {
    if (current === original && obj[method] === wrapper)
      remove();
    return current.apply(this, args);
  }
  function remove() {
    if (obj[method] === wrapper) {
      if (hadOwn)
        obj[method] = original;
      else
        delete obj[method];
    }
    if (current === original)
      return;
    current = original;
    Object.setPrototypeOf(wrapper, original || Function);
  }
}

// src/main.ts
var import_obsidian7 = require("obsidian");

// src/main_modal.ts
var import_obsidian5 = require("obsidian");

// src/types.ts
var commPlugins = "https://raw.githubusercontent.com/obsidianmd/obsidian-releases/master/community-plugins.json";
var commPluginStats = "https://raw.githubusercontent.com/obsidianmd/obsidian-releases/master/community-plugin-stats.json";
var Filters = {
  All: "all",
  Enabled: "enabled",
  Disabled: "disabled",
  EnabledFirst: "enabledFirst",
  MostSwitched: "mostSwitched",
  ByGroup: "byGroup"
};
var CommFilters = {
  All: "all",
  NotInstalled: "not installed",
  Installed: "installed",
  ByGroup: "byGroup"
};
var Groups = {
  SelectGroup: "All"
};
var GroupsComm = {
  SelectGroup: "All"
};
var DEFAULT_SETTINGS = {
  lastFetchExe: 0,
  savedVersion: "0.0.0",
  allPluginsList: [],
  wasEnabled: [],
  filters: Filters.All,
  selectedGroup: "SelectGroup",
  search: "",
  numberOfGroups: 4,
  groups: {},
  showHotKeys: true,
  // commnunity plugins
  pluginStats: {},
  pluginsTagged: {},
  commPlugins: [],
  filtersComm: CommFilters.All,
  selectedGroupComm: "SelectGroup",
  numberOfGroupsComm: 4,
  groupsComm: {}
};

// src/utils.ts
function isEnabled(modal, name) {
  return modal.app.plugins.enabledPlugins.has(name);
}
function removeItem(arr, value) {
  const index = arr.indexOf(value);
  if (index > -1) {
    arr.splice(index, 1);
  }
  return arr;
}
function formatNumber(num, precision = 2) {
  const map = [
    { suffix: "T", threshold: 1e12 },
    { suffix: "B", threshold: 1e9 },
    { suffix: "M", threshold: 1e6 },
    { suffix: "K", threshold: 1e3 },
    { suffix: "", threshold: 1 }
  ];
  const found = map.find((x) => Math.abs(num) >= x.threshold);
  if (found) {
    const formatted = (num / found.threshold).toFixed(precision) + found.suffix;
    return formatted;
  }
  return num;
}
function calculateTimeElapsed(datePasted) {
  const delta = Math.abs(new Date().getTime() - datePasted.getTime()) / 1e3;
  const years = Math.floor(delta / (86400 * 365));
  if (years >= 2) {
    return `${years} years ago`;
  } else if (years === 1) {
    return "1 year ago";
  }
  const months = Math.floor(delta / (86400 * 30));
  if (months >= 2) {
    return `${months} months ago`;
  } else if (months === 1) {
    return "1 month ago";
  }
  const days = Math.floor(delta / 86400);
  if (days >= 2) {
    return `${days} days ago`;
  } else if (days === 1) {
    return "1 day ago";
  }
  const hours = Math.floor(delta / 3600) % 24;
  if (hours >= 2) {
    return `${hours} hours ago`;
  } else if (hours === 1) {
    return "1 hour ago";
  }
  const minutes = Math.floor(delta / 60) % 60;
  if (minutes >= 2) {
    return `${minutes} minutes ago`;
  } else if (minutes === 1) {
    return "1 minute ago";
  }
  return "seconds ago";
}

// src/secondary_modals.ts
var import_obsidian3 = require("obsidian");

// src/community-plugins_modal.ts
var import_fs = require("fs");
var import_obsidian2 = require("obsidian");

// src/modal_utils.ts
var import_obsidian = require("obsidian");
var reset = async (modal) => {
  const { plugin } = modal;
  const confirmed = await confirm("Reset most switched values?", 250);
  if (confirmed) {
    plugin.reset = true;
    plugin.getLength();
    await reOpenModal(modal);
    new import_obsidian.Notice("Done", 2500);
  } else {
    new import_obsidian.Notice("Operation cancelled", 2500);
  }
};
var sortByName = (listItems) => {
  listItems.sort((a, b) => a.name.localeCompare(b.name));
};
var sortSwitched = (listItems) => {
  listItems.sort((a, b) => b.switched - a.switched);
};
var setGroupTitle = (modal, plugin, Groups2, numberOfGroups) => {
  var _a, _b, _c, _d, _e, _f;
  const { settings } = plugin;
  const currentGroupKeys = Object.keys(Groups2);
  for (let i = 1; i < currentGroupKeys.length; i++) {
    const key = currentGroupKeys[i];
    delete Groups2[key];
  }
  for (let i = 1; i <= numberOfGroups; i++) {
    if (modal instanceof CPModal) {
      if (((_a = settings.groupsComm[i]) == null ? void 0 : _a.name) === void 0) {
        settings.groupsComm[i] = {
          name: ""
        };
      }
      const groupKey = ((_b = plugin.settings.groupsComm[i]) == null ? void 0 : _b.name) !== "" ? (_c = plugin.settings.groupsComm[i]) == null ? void 0 : _c.name : `Group${i}`;
      Groups2[`Group${i}`] = `${groupKey}`;
    } else {
      if (((_d = settings.groups[i]) == null ? void 0 : _d.name) === void 0) {
        settings.groups[i] = {
          name: "",
          delayed: false,
          time: 0,
          applied: false
        };
      }
      const groupKey = ((_e = plugin.settings.groups[i]) == null ? void 0 : _e.name) !== "" ? (_f = plugin.settings.groups[i]) == null ? void 0 : _f.name : `Group${i}`;
      Groups2[`Group${i}`] = `${groupKey}`;
    }
  }
};
var getEmojiForGroup = (groupNumber) => {
  const emojis = ["\u{1F7E1}", "\u{1F535}", "\u{1F534}", "\u26AA\uFE0F", "\u{1F7E4}", "\u{1F7E2}", "\u{1F7E3}"];
  const colors = [
    "#FFD700",
    "#0000FF",
    "#FF0000",
    "#FFFFFF",
    "#A52A2A",
    "#00FF00",
    "#800080"
  ];
  return { emoji: emojis[groupNumber - 1], color: colors[groupNumber - 1] };
};
var getCirclesItem = (indices) => {
  const len = indices.length;
  let background = "";
  if (len === 1) {
    const { color } = getEmojiForGroup(indices[len - 1]);
    background = `background: ${color};`;
  } else if (len === 2) {
    const { color: color1 } = getEmojiForGroup(indices[len - 2]);
    const { color: color2 } = getEmojiForGroup(indices[len - 1]);
    background = `background: linear-gradient(90deg, ${color1} 50%, ${color2} 50%);`;
  }
  const content = `<div
            style="${background}"
            class="qps-item-line-group"
            >
            &nbsp;
            </div>
            `;
  return content;
};
var togglePlugin = async (modal, pluginItem) => {
  const { plugin } = modal;
  pluginItem.enabled = !pluginItem.enabled;
  pluginItem.enabled ? await conditionalEnable(modal, pluginItem) : await modal.app.plugins.disablePluginAndSave(pluginItem.id);
  plugin.getLength();
  await plugin.saveSettings();
  await reOpenModal(modal);
};
async function openDirectoryInFileManager(modal, pluginItem) {
  let shell = window.electron.shell;
  const filePath = modal.app.vault.adapter.getFullPath(
    pluginItem.dir
  );
  try {
    await shell.openExternal(filePath);
  } catch (err) {
    const plugins = app.vault.adapter.getFullPath(
      ".obsidian/plugins"
    );
    await shell.openExternal(plugins);
  }
}
var delayedReEnable = async (_this, pluginItem) => {
  await _this.app.plugins.disablePluginAndSave(pluginItem.id);
  await _this.app.plugins.enablePlugin(pluginItem.id).then(pluginItem.enabled = true);
};
var conditionalEnable = async (modal, pluginItem) => {
  if (pluginItem.delayed && pluginItem.time > 0) {
    await modal.app.plugins.enablePlugin(pluginItem.id);
    await modal.plugin.saveSettings();
  } else {
    pluginItem.switched++;
    await modal.app.plugins.enablePluginAndSave(pluginItem.id);
  }
};
var selectValue = (input) => {
  input == null ? void 0 : input.setSelectionRange(0, input == null ? void 0 : input.value.length);
};
function groupNotEmpty(groupIndex, modal) {
  const { plugin } = modal;
  const { settings } = plugin;
  if (modal instanceof QPSModal) {
    return settings.allPluginsList.some(
      (plugin2) => {
        var _a;
        return ((_a = plugin2.groupInfo.groupIndices) == null ? void 0 : _a.indexOf(groupIndex)) !== -1;
      }
    );
  } else {
    for (const pluginKey in settings.pluginsTagged) {
      const plugin2 = settings.pluginsTagged[pluginKey];
      const groupIndices = plugin2.groupInfo.groupIndices || [];
      if (groupIndices.includes(groupIndex)) {
        return true;
      }
    }
    return false;
  }
}
var getPluginsInGroup = (modal, groupNumber) => {
  const { plugin } = modal;
  const { settings } = plugin;
  if (modal instanceof QPSModal)
    return settings.allPluginsList.filter(
      (i) => {
        var _a;
        return ((_a = i.groupInfo.groupIndices) == null ? void 0 : _a.indexOf(groupNumber)) !== -1;
      }
    );
  else {
    const pluginsWithGroup = [];
    Object.keys(settings.pluginsTagged).forEach((pluginKey) => {
      const plugin2 = settings.pluginsTagged[pluginKey];
      const groupIndices = plugin2.groupInfo.groupIndices || [];
      if (groupIndices.includes(groupNumber)) {
        const matchingPlugin = settings.commPlugins.find(
          (plugin3) => plugin3.id === pluginKey
        );
        if (matchingPlugin) {
          pluginsWithGroup.push(matchingPlugin);
        }
      }
    });
    return pluginsWithGroup;
  }
};
function getIndexFromSelectedGroup(str) {
  if (str === "SelectGroup")
    return 0;
  else
    return parseInt(str.slice(-1));
}
function groupNameFromIndex(groups, index) {
  for (let key in groups) {
    if (key.endsWith(index.toString())) {
      return key;
    }
  }
  return null;
}
async function rmvAllGroupsFromPlugin(modal, pluginItem) {
  const { plugin } = modal;
  const { settings } = plugin;
  if ("repo" in pluginItem) {
    const itemID = pluginItem.id;
    const { pluginsTagged } = settings;
    const taggedItem = pluginsTagged[itemID];
    if (!taggedItem)
      return;
    delete pluginsTagged[itemID];
    await plugin.saveSettings();
    if (modal instanceof CPModal) {
      await plugin.saveSettings();
      await reOpenModal(modal);
    }
  } else {
    if (pluginItem.groupInfo) {
      pluginItem.groupInfo.groupIndices = [];
      await plugin.saveSettings();
      await reOpenModal(modal);
    }
  }
}
function createInput(el, currentValue) {
  if (el) {
    const input = document.createElement("input");
    input.type = "text";
    input.value = currentValue;
    el.replaceWith(input);
    input.focus();
    selectValue(input);
    return input;
  } else {
    return void 0;
  }
}
var pressDelay = (modal) => {
  modal.pressed = true;
  setTimeout(() => {
    modal.pressed = false;
  }, 1);
};
function getInstalled() {
  return Object.keys(this.app.plugins.manifests);
}
function isInstalled(item) {
  return getInstalled().includes(item.id);
}
async function reOpenModal(modal) {
  modal.searchInit = false;
  await modal.onOpen();
}

// src/community-plugins_modal.ts
var path = __toESM(require("path"));
var CPModal = class extends import_obsidian2.Modal {
  constructor(app2, plugin) {
    super(app2);
    this.plugin = plugin;
    this.searchTyping = true;
    this.isDblClick = false;
    this.pressed = false;
    this.searchInit = true;
    this.addHeader = (contentEl) => {
      const { plugin } = this;
      const { settings } = plugin;
      new import_obsidian2.DropdownComponent(contentEl).addOptions({
        all: `All(${settings.commPlugins.length})`,
        installed: `Installed(${getInstalled().length})`,
        notInstalled: `Not Installed(${settings.commPlugins.length - getInstalled().length})`,
        byGroup: `By Group`
      }).setValue(settings.filtersComm).onChange(async (value) => {
        settings.filtersComm = value;
        await plugin.saveSettings();
        await reOpenModal(this);
      });
      byGroupDropdowns(this, contentEl);
    };
    this.plugin = plugin;
  }
  container() {
    const { contentEl } = this;
    this.modalEl.addClass("community-plugins-modal");
    this.header = contentEl.createEl("div", {
      cls: "qps-community-header"
    });
    this.search = contentEl.createEl("div", {
      cls: "qps-community-search"
    });
    this.groups = contentEl.createEl("div", {
      cls: ["qps-community-groups", "qps-comm-group"]
    });
    this.hotkeysDesc = contentEl.createEl("p", { cls: "qps-hk-desc" });
    this.items = contentEl.createEl("div", { cls: "qps-community-items" });
    this.modalEl.addEventListener("mousemove", (event) => {
      this.mousePosition = { x: event.clientX, y: event.clientY };
    });
    document.addEventListener("keydown", async (event) => {
      await handleKeyDown(event, this);
    });
    this.modalEl.addEventListener("contextmenu", (evt) => {
      if (this.isDblClick)
        return;
      handleContextMenu(evt, this);
    });
    this.modalEl.addEventListener("dblclick", (evt) => {
      if (this.isDblClick)
        return;
      handleDblClick(evt, this);
    });
  }
  async onOpen() {
    const { plugin, contentEl } = this;
    const { settings } = plugin;
    if (this.searchInit)
      settings.search = "";
    else
      this.searchInit = true;
    await plugin.saveSettings();
    contentEl.empty();
    this.container();
    setGroupTitle(this, plugin, GroupsComm, settings.numberOfGroupsComm);
    this.addHeader(this.header);
    await addSearch(this, this.search, "Search community plugins");
    if (import_obsidian2.Platform.isDesktopApp) {
      searchCommDivButton(this, this.search);
    }
    this.addGroups(this, this.groups);
    if (settings.showHotKeys)
      this.setHotKeysdesc();
    await this.addItems();
  }
  addGroups(modal, contentEl) {
    const groups = Object.values(GroupsComm);
    for (let i = 1; i < groups.length; i++) {
      const groupKey = groups[i];
      contentEl.createEl(
        "span",
        {
          cls: "qps-group-span-container"
        },
        (cont) => {
          const preSpan = cont.createEl(
            "span",
            {
              cls: "qps-circle-title-group"
            },
            (el) => {
              circleCSSModif(this, el, i);
            }
          );
          const span = cont.createEl("span", {
            cls: "qps-groups-name",
            text: `${groupKey}`
          });
          const groupNumberText = `(<span class="shortcut-number">${i}</span>)`;
          span.insertAdjacentHTML("beforeend", groupNumberText);
        }
      );
    }
  }
  setHotKeysdesc() {
    const numberOfGroups = this.plugin.settings.numberOfGroupsComm;
    this.hotkeysDesc.createSpan(
      {
        text: `(1-${numberOfGroups})\u2795 (0)\u274C `
      },
      (el) => {
        el.createSpan({ text: "(g)" }, (el2) => {
          let gitHubIcon = el2.createSpan({ cls: "git-hub-icon" });
          (0, import_obsidian2.setIcon)(gitHubIcon, "github");
        });
        el.createSpan({
          text: ` (i,\u{1F5B1}\uFE0Fx2)Readme`
        });
      }
    );
  }
  async addItems() {
    const { plugin } = this;
    const { settings } = plugin;
    const { commPlugins: commPlugins2, pluginStats } = settings;
    const value = settings.search;
    let listItems = CPMmodeSort(this, commPlugins2);
    sortItemsByDownloads(listItems, pluginStats);
    listItems = doSearch(this, value, listItems);
    for (const item of listItems) {
      const itemContainer = this.items.createEl("div", {
        cls: "qps-comm-block"
      });
      itemContainer.createDiv(
        {
          cls: "qps-community-item-name",
          text: item.name
        },
        (el) => {
          if (isInstalled(item))
            el.createSpan({
              cls: "installed-span",
              text: "installed"
            });
          if (isEnabled(this, item.id)) {
            const span = el.createSpan({
              cls: "enabled-span"
            });
            (0, import_obsidian2.setIcon)(span, "power");
          }
        }
      );
      itemContainer.createDiv({
        cls: "qps-community-item-author",
        text: `By ${item.author} `
      });
      const pluginInfo = pluginStats[item.id];
      if (pluginInfo) {
        itemContainer.createDiv(
          {
            cls: "qps-community-item-downloads"
          },
          (el) => {
            el.createSpan({ cls: "downloads-span" }, (el2) => {
              const preSpan = el2.createSpan();
              const span = el2.createSpan({
                text: formatNumber(
                  pluginInfo.downloads,
                  1
                ).toString(),
                cls: "downloads-text-span"
              });
              addGroupCircles(this, span, item);
              (0, import_obsidian2.setIcon)(preSpan, "download-cloud");
            });
          }
        );
        const lastUpdated = new Date(pluginInfo.updated);
        const timeSinceUpdate = calculateTimeElapsed(lastUpdated);
        itemContainer.createDiv({
          cls: "qps-community-item-updated",
          text: `Updated ${timeSinceUpdate}`
        });
      }
      itemContainer.createDiv({
        cls: "qps-community-item-desc",
        text: item.description
      });
    }
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
    document.removeEventListener("mousemove", (event) => {
      this.mousePosition = { x: event.clientX, y: event.clientY };
    });
    document.removeEventListener("keydown", async (event) => {
      await handleKeyDown(event, this);
    });
    this.modalEl.removeEventListener("contextmenu", (evt) => {
      if (this.isDblClick)
        return;
      handleContextMenu(evt, this);
    });
    this.modalEl.removeEventListener("dblclick", (evt) => {
      if (this.isDblClick)
        return;
      handleDblClick(evt, this);
    });
    this.plugin.getPluginsInfo();
    this.plugin.getLength();
    new QPSModal(this.app, this.plugin).open();
  }
};
async function fetchData(url) {
  try {
    const response = await fetch(url);
    const data = await response.json();
    if (data)
      return data;
  } catch (error) {
    return null;
  }
}
async function getReadMe(item) {
  const repo = item.repo;
  const repoURL = `https://api.github.com/repos/${repo}/contents/README.md`;
  try {
    const response = await fetch(repoURL);
    return await response.json();
  } catch (error) {
    console.warn("Error fetching ReadMe");
  }
  return null;
}
async function getManifest(item) {
  const repo = item.repo;
  const repoURL = `https://raw.githubusercontent.com/${repo}/master/manifest.json`;
  try {
    const response = await fetch(repoURL);
    return await response.json();
  } catch (error) {
    console.warn("Error fetching manifest");
  }
  return null;
}
function sortItemsByDownloads(listItems, pluginStats) {
  listItems.sort((a, b) => {
    const pluginAStats = pluginStats[a.id];
    const pluginBStats = pluginStats[b.id];
    if (pluginAStats && pluginBStats) {
      return pluginBStats.downloads - pluginAStats.downloads;
    }
    return 0;
  });
}
function CPMmodeSort(modal, listItems) {
  const { settings } = modal.plugin;
  const { filtersComm } = settings;
  if (filtersComm === "installed") {
    const installedPlugins = getInstalled();
    return listItems.filter((item) => installedPlugins.includes(item.id));
  } else if (filtersComm === "notInstalled") {
    const installedPlugins = getInstalled();
    return listItems.filter((item) => !installedPlugins.includes(item.id));
  } else if (filtersComm === "byGroup") {
    const groupIndex = getIndexFromSelectedGroup(
      settings.selectedGroup
    );
    if (groupIndex !== 0) {
      const groupedItems = listItems.filter((i) => {
        const { pluginsTagged } = settings;
        const taggedItem = pluginsTagged[i.id];
        if (taggedItem) {
          const { groupInfo } = taggedItem;
          const { groupIndices } = groupInfo;
          return (groupIndices == null ? void 0 : groupIndices.indexOf(groupIndex)) !== -1;
        } else
          return false;
      });
      return groupedItems;
    } else
      return listItems;
  } else {
    return listItems;
  }
}
function circleCSSModif(modal, el, groupIndex) {
  const { settings } = modal.plugin;
  const { color } = getEmojiForGroup(groupIndex);
  el.style.backgroundColor = color;
}
var handleKeyDown = async (event, modal) => {
  const elementFromPoint = getElementFromMousePosition(event, modal);
  const targetBlock = elementFromPoint == null ? void 0 : elementFromPoint.closest(
    ".qps-comm-block"
  );
  if (targetBlock) {
    const matchingItem = findMatchingItem(modal, targetBlock);
    if (matchingItem) {
      modal.searchTyping = false;
      await handleHotkeysCPM(
        modal,
        event,
        matchingItem
      );
    }
  } else {
    modal.searchTyping = true;
  }
};
var handleHotkeysCPM = async (modal, evt, pluginItem) => {
  if (modal.pressed) {
    return;
  }
  pressDelay(modal);
  const { plugin } = modal;
  const { settings } = plugin;
  const numberOfGroups = settings.numberOfGroupsComm;
  const KeyToSettingsMap = {
    g: async () => await openGitHubRepo(pluginItem),
    i: () => new ReadMeModal(plugin.app, modal, pluginItem).open()
  };
  const { pluginsTagged } = settings;
  const keyPressed = evt.key;
  const itemID = pluginItem.id;
  let taggedItem = pluginsTagged[itemID];
  if (!taggedItem) {
    pluginsTagged[itemID] = {
      groupInfo: { groupIndices: [] }
    };
  }
  taggedItem = pluginsTagged[itemID];
  const { groupInfo } = taggedItem;
  const { groupIndices } = groupInfo;
  const key = parseInt(keyPressed);
  if (key > 0 && key <= numberOfGroups) {
    if (groupIndices.length === 6)
      return;
    const index = groupIndices.indexOf(key);
    if (index === -1) {
      groupIndices.push(key);
      await plugin.saveSettings();
      await reOpenModal(modal);
    }
  } else if (keyPressed in KeyToSettingsMap) {
    KeyToSettingsMap[keyPressed]();
  } else if (keyPressed === "Delete" || keyPressed === "Backspace" || keyPressed === "0") {
    if (groupIndices.length === 1) {
      delete pluginsTagged[itemID];
      await plugin.saveSettings();
      await reOpenModal(modal);
    } else if (groupIndices.length > 1) {
      const menu = new import_obsidian2.Menu();
      menu.addItem(
        (item) => item.setTitle("Remove item group(s)").setDisabled(true).setDisabled(true)
      );
      menu.addSeparator();
      menu.addItem(
        (item) => item.setTitle("All").onClick(async () => {
          await rmvAllGroupsFromPlugin(modal, pluginItem);
        })
      );
      for (const groupIndex of groupIndices) {
        const { emoji } = getEmojiForGroup(groupIndex);
        menu.addItem(
          (item) => item.setTitle(`${emoji} group ${groupIndex}`).onClick(async () => {
            if (groupInfo) {
              groupInfo.groupIndices = removeItem(
                groupIndices,
                groupIndex
              );
              await plugin.saveSettings();
              await reOpenModal(modal);
            }
          })
        );
      }
      menu.showAtPosition(modal.mousePosition);
    }
  }
};
var addGroupCircles = (modal, el, item) => {
  const { settings } = modal.plugin;
  const key = item.id;
  const taggedItem = settings.pluginsTagged[key];
  if (!taggedItem)
    return;
  const indices = taggedItem.groupInfo.groupIndices;
  if (indices == null ? void 0 : indices.length) {
    if (indices.length < 3) {
      const content = getCirclesItem(indices);
      el.insertAdjacentHTML("afterend", content);
    }
    if (indices.length >= 3 && indices.length < 5) {
      const [valeur0, valeur1, ...part2] = indices;
      const part1 = [valeur0, valeur1];
      const content1 = getCirclesItem(part1);
      el.insertAdjacentHTML("afterend", content1);
      const content2 = getCirclesItem(part2);
      el.insertAdjacentHTML("afterend", content2);
    } else if (indices.length >= 5) {
      const [valeur0, valeur1, valeur2, valeur3, ...part3] = indices;
      const part1 = [valeur0, valeur1];
      const part2 = [valeur2, valeur3];
      const content1 = getCirclesItem(part1);
      el.insertAdjacentHTML("afterend", content1);
      const content2 = getCirclesItem(part2);
      el.insertAdjacentHTML("afterend", content2);
      const content3 = getCirclesItem(part3);
      el.insertAdjacentHTML("afterend", content3);
    }
  }
};
async function installFromList(modal, enable = false) {
  let properties = ["openFile"];
  let filePaths = window.electron.remote.dialog.showOpenDialogSync({
    title: "Pick json list file of plugins to install",
    properties,
    filters: ["JsonList", "json"]
  });
  if (filePaths && filePaths.length) {
    const contenu = (0, import_fs.readFileSync)(filePaths[0], "utf-8");
    try {
      const pluginList = JSON.parse(contenu);
      if (Array.isArray(pluginList)) {
        const plugins = modal.plugin.settings.commPlugins.filter(
          (plugin) => {
            return pluginList.includes(plugin.id);
          }
        );
        await installAllPluginsInGroup(modal, plugins, enable);
      } else {
        console.error("this file is not a JSON list.");
      }
    } catch (erreur) {
      console.error("Error reading JSON file: ", erreur);
    }
  }
}
async function getPluginsList(modal, enable = false) {
  const installed = getInstalled();
  let filePath = window.electron.remote.dialog.showSaveDialogSync({
    title: "Save installed plugins list as JSON",
    filters: [{ name: "JSON Files", extensions: ["json"] }]
  });
  if (filePath && filePath.length) {
    try {
      const jsonContent = JSON.stringify(installed, null, 2);
      (0, import_fs.writeFileSync)(filePath, jsonContent);
      new import_obsidian2.Notice(`${filePath} created`, 2500);
    } catch (error) {
      console.error("Error saving JSON file:", error);
    }
  }
}
async function installPluginFromOtherVault(modal, enable = false) {
  let dirPath = window.electron.remote.dialog.showOpenDialogSync({
    title: "Select your vault directory, you want plugins list from",
    properties: ["openDirectory"]
  });
  if (dirPath && dirPath.length) {
    const vaultPath = dirPath[0];
    const obsidianPath = path.join(vaultPath, ".obsidian");
    if (!(0, import_fs.existsSync)(obsidianPath)) {
      new import_obsidian2.Notice("Select a vault folder!", 2500);
      return;
    }
    const selectedVaultName = path.basename(vaultPath);
    const currentVaultName = modal.app.vault.getName();
    if (selectedVaultName === currentVaultName) {
      new import_obsidian2.Notice("You have selected the current vault!", 2500);
      return;
    }
    const pluginsPath = path.join(obsidianPath, "plugins");
    if (!(0, import_fs.existsSync)(pluginsPath)) {
      new import_obsidian2.Notice(
        "This vault doesn't contain any installed plugin!",
        2500
      );
      return;
    }
    const installedPlugins = [];
    const pluginFolders = (0, import_fs.readdirSync)(pluginsPath);
    for (const pluginFolder of pluginFolders) {
      const pluginFolderPath = path.join(pluginsPath, pluginFolder);
      const packageJsonPath = path.join(pluginFolderPath, "package.json");
      const manifestJsonPath = path.join(
        pluginFolderPath,
        "manifest.json"
      );
      const mainJsPath = path.join(pluginFolderPath, "main.js");
      if ((0, import_fs.existsSync)(packageJsonPath)) {
        continue;
      }
      if ((0, import_fs.existsSync)(manifestJsonPath) && (0, import_fs.existsSync)(mainJsPath)) {
        const manifestContent = (0, import_fs.readFileSync)(manifestJsonPath, "utf-8");
        const manifestData = JSON.parse(manifestContent);
        const pluginId = manifestData.id;
        installedPlugins.push(pluginId);
      }
    }
    if (!installedPlugins.length) {
      new import_obsidian2.Notice("Found no plugin to install", 2500);
      return;
    }
    const plugins = modal.plugin.settings.commPlugins.filter((plugin) => {
      return installedPlugins.includes(plugin.id);
    });
    await installAllPluginsInGroup(modal, plugins, enable);
  }
}

// src/secondary_modals.ts
var DescriptionModal = class extends import_obsidian3.Modal {
  constructor(app2, plugin, pluginItem) {
    super(app2);
    this.plugin = plugin;
    this.pluginItem = pluginItem;
    this.plugin = plugin;
    this.pluginItem = pluginItem;
  }
  onOpen() {
    const { contentEl, pluginItem } = this;
    contentEl.empty();
    contentEl.createEl("p", {
      text: pluginItem.name + " - v" + pluginItem.version
    }).createEl("p", {
      text: "author: " + pluginItem.author + ", url: " + (pluginItem.authorUrl ? "" : "null")
    }).createEl("a", {
      text: pluginItem.authorUrl,
      href: pluginItem.authorUrl
    });
    contentEl.createEl("p", { text: pluginItem.desc });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var ConfirmModal = class extends import_obsidian3.Modal {
  constructor(app2, message, callback, width, height) {
    super(app2);
    this.message = message;
    this.callback = callback;
    this.width = width;
    this.height = height;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    if (this.width) {
      this.modalEl.style.width = `${this.width}px`;
    }
    if (this.height) {
      this.modalEl.style.height = `${this.height}px`;
    }
    contentEl.createEl("p").setText(this.message);
    new import_obsidian3.Setting(this.contentEl).addButton((b) => {
      b.setIcon("checkmark").setCta().onClick(() => {
        this.callback(true);
        this.close();
      });
    }).addExtraButton(
      (b) => b.setIcon("cross").onClick(() => {
        this.callback(false);
        this.close();
      })
    );
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
async function openConfirmModal(app2, message, width, height) {
  return await new Promise((resolve) => {
    new ConfirmModal(
      app2,
      message,
      (confirmed) => {
        resolve(confirmed);
      },
      width != null ? width : void 0,
      height != null ? height : void 0
    ).open();
  });
}
async function confirm(message, width, height) {
  return await openConfirmModal(
    this.app,
    message,
    width != null ? width : void 0,
    height != null ? height : void 0
  );
}
var ReadMeModal = class extends import_obsidian3.Modal {
  constructor(app2, modal, pluginItem) {
    super(app2);
    this.modal = modal;
    this.pluginItem = pluginItem;
    this.scope = new import_obsidian3.Scope(this.app.scope);
    this.modal = modal;
    this.pluginItem = pluginItem;
    this.modalEl.addClass("read-me-modal");
    this.comp = new import_obsidian3.Component();
    this.comp.load();
  }
  async onOpen() {
    const { contentEl, pluginItem } = this;
    contentEl.empty();
    contentEl.createEl("p", {
      text: pluginItem.name,
      cls: "readme-title"
    }).createEl("p", {
      text: "By: " + pluginItem.author
    });
    const openRepo = contentEl.createDiv();
    new import_obsidian3.ButtonComponent(openRepo).setButtonText("GitHub Repo").onClick(async () => {
      await openGitHubRepo(pluginItem);
    });
    const divButtons = contentEl.createDiv({ cls: "read-me-buttons" });
    if (!isInstalled(pluginItem)) {
      new import_obsidian3.ButtonComponent(divButtons).setButtonText("Install").setCta().onClick(async () => {
        await installLatestPluginVersion(this.modal, pluginItem);
        new import_obsidian3.Notice(`${pluginItem.name} installed`, 2500);
        await this.onOpen();
      });
    } else {
      const manifests = this.app.plugins.manifests || {};
      let condition;
      if (!isEnabled(this.modal, manifests[pluginItem.id].id)) {
        new import_obsidian3.ButtonComponent(divButtons).setButtonText("Enable").onClick(async () => {
          await this.modal.app.plugins.enablePluginAndSave(pluginItem.id);
          await this.onOpen();
          condition = await getCommandCondition(
            this.modal,
            pluginItem
          );
          if (condition)
            await this.onOpen();
          new import_obsidian3.Notice(`${pluginItem.name} enabled`, 2500);
        });
      } else {
        const pluginSettings = await this.modal.app.setting.openTabById(pluginItem.id);
        if (pluginSettings) {
          new import_obsidian3.ButtonComponent(divButtons).setButtonText("Options").onClick(async () => {
            await openPluginSettings(
              this.modal,
              pluginItem
            );
          });
        }
        condition = await getHkeyCondition(this.modal, pluginItem);
        if (condition) {
          new import_obsidian3.ButtonComponent(divButtons).setButtonText("Hotkeys").onClick(async () => {
            await showHotkeysFor(this.modal, pluginItem);
          });
        }
        new import_obsidian3.ButtonComponent(divButtons).setButtonText("Disable").onClick(async () => {
          await this.modal.app.plugins.disablePluginAndSave(pluginItem.id);
          await this.onOpen();
          new import_obsidian3.Notice(`${pluginItem.name} disabled`, 2500);
        });
      }
      new import_obsidian3.ButtonComponent(divButtons).setButtonText("Uninstall").onClick(async () => {
        await this.modal.app.plugins.uninstallPlugin(
          pluginItem.id
        );
        await this.onOpen();
        new import_obsidian3.Notice(`${pluginItem.name} uninstalled`, 2500);
      });
    }
    const div = contentEl.createDiv({ cls: "qps-read-me" });
    const data = await getReadMe(pluginItem);
    const content = Buffer.from(data.content, "base64").toString("utf-8");
    const updatedContent = modifyGitHubLinks(content, pluginItem);
    import_obsidian3.MarkdownRenderer.render(this.app, updatedContent, div, "/", this.comp);
    this.modalEl.addEventListener("mousemove", (event) => {
      this.mousePosition = { x: event.clientX, y: event.clientY };
    });
    this.scope.register(["Ctrl"], "t", async () => {
      const selectedContent = getSelectedContent();
      if (!selectedContent) {
        new import_obsidian3.Notice("no selection", 4e3);
        return;
      }
      await translation(selectedContent);
    });
    this.modalEl.addEventListener("contextmenu", (event) => {
      event.preventDefault();
      const selectedContent = getSelectedContent();
      if (selectedContent) {
        const menu = new import_obsidian3.Menu();
        menu.addItem(
          (item) => item.setTitle("Copy Ctrl+C").onClick(async () => {
            await navigator.clipboard.writeText(selectedContent);
          })
        );
        menu.addItem(
          (item) => item.setTitle("translate").onClick(async () => {
            await translation(selectedContent);
          })
        );
        menu.showAtPosition(this.mousePosition);
      }
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
    this.comp.unload();
  }
};
function getSelectedContent() {
  const selection = window.getSelection();
  return selection == null ? void 0 : selection.toString();
}
function canTranslate() {
  return this.plugin.translator && this.plugin.translator.valid;
}
async function translate(text, from) {
  let to = "";
  const plugin = this.app.plugins.plugins.translate;
  if (!plugin) {
    new import_obsidian3.Notice(
      "install obsidian-translate and select a translator"
    );
    return;
  }
  if (!canTranslate) {
    new import_obsidian3.Notice("translator not valid. check your settings", 4e3);
    return;
  }
  const loaded_settings = await plugin.loadData();
  if (loaded_settings.target_language_preference === "last") {
    to = loaded_settings.last_used_target_languages[0];
  } else if (loaded_settings.target_language_preference === "specific") {
    to = loaded_settings.default_target_language;
  } else if (loaded_settings.target_language_preference === "display") {
    to = plugin.current_language;
  }
  return plugin.translator.translate(text, from, to);
}
async function translation(selectedContent) {
  const translated = await translate(selectedContent, "en");
  if (!translated)
    return;
  const translation2 = translated.translation;
  if (!translation2) {
    new import_obsidian3.Notice("translator not valid. check your settings", 4e3);
    return;
  }
  new TranslateModal(this.app, translation2).open();
}
var TranslateModal = class extends import_obsidian3.Modal {
  constructor(app2, message) {
    super(app2);
    this.message = message;
    this.modalEl.addClass("translate-modal");
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    const lines = this.message.split("\n");
    lines.forEach((line) => contentEl.createEl("p").setText(line));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
function modifyGitHubLinks(content, pluginItem) {
  const regex = /!\[([^\]]*)\]\(([^)]*)\)/g;
  return content.replace(/\/blob\//g, "/raw/").replace(regex, (match, alt, url) => {
    if (!url.startsWith("http")) {
      if (url.startsWith(".")) {
        url = `https://github.com/${pluginItem.repo}/raw/HEAD${url.substr(1)}`;
      } else {
        url = `https://github.com/${pluginItem.repo}/raw/HEAD/${url}`;
      }
    }
    return `![${alt}](${url})`;
  });
}

// src/modal_components.ts
var import_obsidian4 = require("obsidian");
var mostSwitchedResetButton = (modal, contentEl) => {
  const { settings } = modal.plugin;
  if (settings.filters === Filters.MostSwitched && settings.allPluginsList.some((plugin) => plugin.switched !== 0)) {
    new import_obsidian4.ExtraButtonComponent(contentEl).setIcon("reset").setTooltip("Reset mostSwitched values").onClick(async () => {
      reset(modal);
      await reOpenModal(modal);
    });
  }
};
var byGroupDropdowns = (modal, contentEl) => {
  const { plugin } = modal;
  const { settings } = plugin;
  if (modal instanceof QPSModal && settings.filters === Filters.ByGroup) {
    getDropdownOptions(Groups, plugin.lengthAll);
  } else if (modal instanceof CPModal && settings.filtersComm === CommFilters.ByGroup) {
    getDropdownOptions(GroupsComm, settings.commPlugins.length);
  }
  function getDropdownOptions(groups, length) {
    const dropdownOptions = {};
    for (const groupKey in groups) {
      const groupIndex = getIndexFromSelectedGroup(groupKey);
      if (groupKey === "SelectGroup") {
        dropdownOptions[groupKey] = groups[groupKey] + `(${length})`;
      } else if (groupNotEmpty(groupIndex, modal)) {
        dropdownOptions[groupKey] = getEmojiForGroup(groupIndex).emoji + groups[groupKey];
      }
    }
    new import_obsidian4.DropdownComponent(contentEl).addOptions(dropdownOptions).setValue(settings.selectedGroup).onChange(async (value) => {
      settings.selectedGroup = value;
      await plugin.saveSettings();
      await reOpenModal(modal);
    });
  }
};
async function addSearch(modal, contentEl, placeholder) {
  const { plugin } = modal;
  const { settings } = plugin;
  new import_obsidian4.Setting(contentEl).addSearch(async (search) => {
    const actualValue = search.getValue();
    search.setValue(settings.search).setPlaceholder(placeholder).onChange(async (value) => {
      if (modal.searchTyping) {
        settings.search = value;
        modal.items.empty();
        modal.addItems();
      } else {
        value = actualValue;
      }
    });
  }).setClass("qps-search-component");
}
function doSearch(modal, value, pluginsList) {
  const lowerCaseValue = value.toLowerCase();
  return pluginsList.filter(
    (item) => [
      item.name,
      modal instanceof QPSModal ? "" : item.description,
      item.author
    ].some((prop) => prop.toLowerCase().includes(lowerCaseValue))
  );
}
var commButton = (modal, el) => {
  const { plugin } = modal;
  new import_obsidian4.ButtonComponent(el).setIcon("download-cloud").setCta().setTooltip(
    "community plugins: you can to tag plugins with groups, install by group..."
  ).buttonEl.addEventListener("click", (evt) => {
    modal.close();
    new CPModal(modal.app, plugin).open();
  });
};
var commOptionButton = (modal, el) => {
  const { plugin } = modal;
  new import_obsidian4.ButtonComponent(el).setIcon("list-end").setCta().setTooltip(
    "Install & enable plugins based on another Vault content or from a JSON list"
  ).buttonEl.addEventListener("click", (evt) => {
    const menu = new import_obsidian4.Menu();
    menu.addItem(
      (item) => item.setTitle("Install plugins based on another Vault").setIcon("book-copy").onClick(async () => {
        await installPluginFromOtherVault(modal);
      })
    );
    menu.addItem(
      (item) => item.setTitle("Install & enable plugins based on another Vault").setIcon("book-copy").onClick(async () => {
        await installPluginFromOtherVault(modal, true);
      })
    );
    menu.addSeparator();
    menu.addItem(
      (item) => item.setTitle("Save installed plugins list").setIcon("pen-square").onClick(async () => {
        await getPluginsList(modal, true);
      })
    );
    menu.addItem(
      (item) => item.setTitle("Install & enable plugins from json list").setIcon("list").onClick(async () => {
        await installFromList(modal, true);
      })
    );
    menu.addItem(
      (item) => item.setTitle("Install plugins from json list").setIcon("list").onClick(async () => {
        await installFromList(modal);
      })
    );
    menu.showAtMouseEvent(evt);
  });
};
var powerButton = (modal, el) => {
  const { plugin } = modal;
  const { settings } = plugin;
  new import_obsidian4.ButtonComponent(el).setIcon("power").setCta().setTooltip(
    "toggle plugins: you can disable some plugins and enable them later"
  ).buttonEl.addEventListener("click", (evt) => {
    const menu = new import_obsidian4.Menu();
    if (plugin.lengthEnabled === 1 && settings.wasEnabled.length === 0) {
      menu.addItem((item) => item.setTitle("No enabled plugins"));
    } else {
      menu.addItem(
        (item) => item.setTitle(
          settings.wasEnabled.length > 0 ? "Enable previous disabled plugins" : "Disable all plugins"
        ).setIcon(
          settings.wasEnabled.length > 0 ? "power" : "power-off"
        ).onClick(async () => {
          if (plugin.lengthEnabled > 1) {
            for (const i of settings.allPluginsList) {
              if (i.id === "quick-plugin-switcher")
                continue;
              if (i.enabled)
                settings.wasEnabled.push(i.id);
              await modal.app.plugins.disablePluginAndSave(i.id);
              i.enabled = false;
            }
            plugin.getLength();
            await reOpenModal(modal);
            await plugin.saveSettings();
            new import_obsidian4.Notice("All plugins disabled", 2500);
          } else if (settings.wasEnabled.length > 0) {
            for (const i of settings.wasEnabled) {
              const pluginToUpdate = settings.allPluginsList.find(
                (plugin2) => plugin2.id === i
              );
              if (pluginToUpdate) {
                await conditionalEnable(
                  modal,
                  pluginToUpdate
                );
                pluginToUpdate.enabled = true;
              }
            }
            plugin.getLength();
            await reOpenModal(modal);
            settings.wasEnabled = [];
            new import_obsidian4.Notice("All plugins re-enabled", 2500);
            await modal.plugin.saveSettings();
          }
        })
      );
      if (settings.wasEnabled.length > 0) {
        menu.addItem(
          (item) => item.setTitle("Skip re-enable").setIcon("reset").onClick(async () => {
            const confirmReset = await confirm(
              "reset to disable",
              300
            );
            if (confirmReset) {
              settings.wasEnabled = [];
              await modal.plugin.saveSettings();
              new import_obsidian4.Notice("Done", 2500);
            } else {
              new import_obsidian4.Notice("Operation cancelled", 2500);
            }
          })
        );
      }
      menu.addSeparator();
      menu.addItem(
        (item) => item.setTitle("Toggle enabled-plugins by group").setDisabled(true)
      );
      Object.keys(Groups).forEach((groupKey) => {
        if (groupKey === "SelectGroup")
          return;
        const groupValue = Groups[groupKey];
        const groupIndex = getIndexFromSelectedGroup(groupKey);
        const inGroup = settings.allPluginsList.filter((plugin2) => {
          var _a;
          return ((_a = plugin2.groupInfo.groupIndices) == null ? void 0 : _a.indexOf(
            groupIndex
          )) !== -1;
        });
        let previousWasEnabled = inGroup.filter(
          (i) => i.groupInfo.groupWasEnabled === true
        );
        if (inGroup.length > 0 && (inGroup.some((i) => i.enabled === true) || previousWasEnabled.length > 0)) {
          menu.addItem(
            (item) => item.setTitle(
              previousWasEnabled.length > 0 ? `Re-enable ${groupValue}` : groupValue
            ).setIcon(
              previousWasEnabled.length > 0 ? "power" : "power-off"
            ).onClick(async () => {
              if (previousWasEnabled.length === 0) {
                const toDisable = inGroup.filter((i) => i.enabled === true).map(async (i) => {
                  i.groupInfo.groupWasEnabled = true;
                  await modal.app.plugins.disablePluginAndSave(
                    i.id
                  );
                  i.enabled = false;
                });
                await Promise.all(toDisable);
                if (toDisable) {
                  plugin.getLength();
                  await reOpenModal(modal);
                  new import_obsidian4.Notice(
                    "All plugins disabled",
                    2500
                  );
                  await modal.plugin.saveSettings();
                }
              } else {
                for (const i of previousWasEnabled) {
                  await conditionalEnable(modal, i);
                  i.enabled = true;
                  i.switched++;
                }
                previousWasEnabled.map((plugin2) => {
                  plugin2.groupInfo.groupWasEnabled = false;
                });
                plugin.getLength();
                await reOpenModal(modal);
                new import_obsidian4.Notice(
                  "All plugins re-enabled",
                  2500
                );
              }
            })
          );
          if (previousWasEnabled.length > 0) {
            menu.addItem(
              (item) => item.setTitle("Skip re-enable").setIcon("reset").onClick(async () => {
                const confirmReset = await confirm(
                  "skip re-enable ?",
                  200
                );
                if (confirmReset) {
                  previousWasEnabled.map((plugin2) => {
                    plugin2.groupInfo.groupWasEnabled = false;
                  });
                  await modal.plugin.saveSettings();
                  new import_obsidian4.Notice("Done", 2500);
                } else {
                  new import_obsidian4.Notice(
                    "Operation cancelled",
                    2500
                  );
                }
              })
            );
          }
        }
      });
    }
    menu.showAtMouseEvent(evt);
  });
};
var modeSort = (plugin, listItems) => {
  const { settings } = plugin;
  if (plugin.reset) {
    const allPluginsList = settings.allPluginsList;
    allPluginsList.forEach((i) => {
      i.switched = 0;
    });
    plugin.reset = false;
  }
  if (settings.filters === Filters.EnabledFirst) {
    const enabledItems = listItems.filter((i) => i.enabled);
    const disabledItems = listItems.filter((i) => !i.enabled);
    sortByName(enabledItems);
    sortByName(disabledItems);
    listItems = [...enabledItems, ...disabledItems];
  } else if (settings.filters === Filters.ByGroup) {
    const groupIndex = getIndexFromSelectedGroup(
      settings.selectedGroup
    );
    if (groupIndex !== 0) {
      const groupedItems = listItems.filter((i) => {
        var _a;
        return ((_a = i.groupInfo.groupIndices) == null ? void 0 : _a.indexOf(groupIndex)) !== -1;
      });
      listItems = groupedItems;
      sortByName(listItems);
    } else {
      sortByName(listItems);
    }
  } else if (settings.filters === Filters.MostSwitched) {
    sortByName(listItems);
    sortSwitched(listItems);
  } else {
    sortByName(listItems);
  }
  return listItems;
};
var editGroupName = (modal, span, groupNumber) => {
  var _a, _b;
  const { plugin } = modal;
  const { settings } = plugin;
  const currentValue = (modal instanceof CPModal ? ((_a = settings.groupsComm[groupNumber]) == null ? void 0 : _a.name) || "" : (_b = settings.groups[groupNumber]) == null ? void 0 : _b.name) || "";
  const updateGroupName = (value) => {
    if (modal instanceof CPModal) {
      settings.groupsComm[groupNumber].name = value || GroupsComm[groupNumber];
      span.textContent = settings.groupsComm[groupNumber].name;
    } else {
      settings.groups[groupNumber].name = value || Groups[groupNumber];
      span.textContent = settings.groups[groupNumber].name;
    }
  };
  const handleBlurOrEnter = () => {
    setTimeout(async () => {
      if (!modal.isDblClick && input) {
        updateGroupName(input.value);
        if (modal instanceof CPModal) {
          await reOpenModal(modal);
        } else {
          await reOpenModal(modal);
        }
      }
    }, 200);
  };
  const input = createInput(span, currentValue);
  if (input) {
    input.addEventListener("blur", handleBlurOrEnter);
    input.addEventListener("keydown", (event) => {
      if (event.key === "Enter") {
        handleBlurOrEnter();
      }
    });
  }
};
var itemToggleClass = (modal, pluginItem, itemContainer) => {
  const { settings } = modal.plugin;
  if (pluginItem.id === "quick-plugin-switcher") {
    itemContainer.toggleClass("qps-quick-plugin-switcher", true);
  }
  if (pluginItem.desktopOnly === true) {
    itemContainer.addClass("qps-desktop-only");
  }
  if (settings.filters === Filters.MostSwitched && pluginItem.switched !== 0) {
    itemContainer.toggleClass("qps-most-switched", true);
  }
  if (pluginItem.delayed) {
    itemContainer.toggleClass("toggle-bullet-color", true);
    itemContainer.style.setProperty(
      "--bullet-content",
      `"${pluginItem.time}"`
    );
  }
};
function hasKeyStartingWith(obj, prefix) {
  for (const key in obj) {
    if (key.startsWith(prefix)) {
      return true;
    }
  }
  return false;
}
var itemTextComponent = (pluginItem, itemContainer) => {
  let customValue = pluginItem.name;
  if (pluginItem.desktopOnly) {
    customValue = "\u1D30" + customValue;
  }
  const text = new import_obsidian4.TextComponent(itemContainer).setValue(customValue).inputEl;
  return text;
};
function addRemoveItemGroupMenuItems(modal, submenu, plugin, pluginItem) {
  const { settings } = plugin;
  Object.keys(Groups).forEach((groupKey) => {
    var _a;
    const { lengthGroup, groupIndex, groupValue } = getGroupIndexLength(
      modal,
      groupKey
    );
    const getGroup = ((_a = pluginItem.groupInfo.groupIndices) == null ? void 0 : _a.indexOf(groupIndex)) !== -1;
    if (groupKey !== "SelectGroup" && lengthGroup && getGroup) {
      submenu.addItem((subitem) => {
        subitem.setTitle(`${groupValue}`).onClick(async () => {
          for (const index of pluginItem.groupInfo.groupIndices) {
            if (index === groupIndex) {
              removeItem(
                pluginItem.groupInfo.groupIndices,
                index
              );
              await plugin.saveSettings();
              if (!groupNotEmpty(groupIndex, modal)) {
                settings.selectedGroup = "SelectGroup";
              }
              break;
            }
          }
          await reOpenModal(modal);
        });
      });
    }
  });
}
var getGroupIndexLength = (modal, groupKey) => {
  const groupIndex = getIndexFromSelectedGroup(groupKey);
  const { settings } = modal.plugin;
  let lengthGroup, groupValue;
  if (modal instanceof QPSModal) {
    lengthGroup = settings.allPluginsList.filter(
      (i) => {
        var _a;
        return ((_a = i.groupInfo.groupIndices) == null ? void 0 : _a.indexOf(groupIndex)) !== -1;
      }
    ).length;
    groupValue = Groups[groupKey];
  } else {
    lengthGroup = Object.keys(settings.pluginsTagged).filter((id) => {
      const plugin = settings.pluginsTagged[id];
      const groupIndices = plugin.groupInfo.groupIndices;
      return (groupIndices == null ? void 0 : groupIndices.indexOf(groupIndex)) !== -1;
    }).length;
    groupValue = GroupsComm[groupKey];
  }
  return { groupIndex, lengthGroup, groupValue };
};
function addRemoveGroupMenuItems(modal, submenu, groupNumber) {
  const { plugin } = modal;
  const { settings } = plugin;
  let groupName;
  if (modal instanceof QPSModal) {
    groupName = groupNameFromIndex(Groups, groupNumber);
  } else {
    groupName = groupNameFromIndex(GroupsComm, groupNumber);
  }
  const { lengthGroup, groupValue } = getGroupIndexLength(modal, groupName);
  if (groupName !== "SelectGroup" && lengthGroup) {
    submenu.addItem((subitem) => {
      subitem.setTitle(`${groupValue}`).onClick(async () => {
        var _a, _b;
        let pluginsRemoved = false;
        if (modal instanceof QPSModal) {
          for (const i of settings.allPluginsList) {
            const index = (_a = i.groupInfo.groupIndices) == null ? void 0 : _a.indexOf(groupNumber);
            if (index !== -1) {
              (_b = i.groupInfo.groupIndices) == null ? void 0 : _b.splice(index, 1);
              pluginsRemoved = true;
            }
          }
        } else {
          const taggedItem = settings.pluginsTagged;
          Object.keys(taggedItem).forEach((id) => {
            const plugin2 = taggedItem[id];
            const groupIndices = plugin2.groupInfo.groupIndices;
            plugin2.groupInfo.groupIndices = groupIndices.filter(
              (index) => index !== groupNumber
            );
            pluginsRemoved = true;
          });
        }
        await plugin.saveSettings();
        await reOpenModal(modal);
        if (pluginsRemoved) {
          new import_obsidian4.Notice(`All plugins removed from ${groupValue}`, 2500);
        } else {
          new import_obsidian4.Notice(`No plugins found in ${groupValue} group`, 2500);
        }
      });
    });
  }
}
var addToGroupSubMenu = (submenu, pluginItem, modal) => {
  Object.entries(Groups).forEach(([key, value]) => {
    const groupIndices = pluginItem.groupInfo.groupIndices;
    const groupIndex = getIndexFromSelectedGroup(key);
    if (key !== "SelectGroup") {
      submenu.addItem(
        (item) => item.setTitle(value).setDisabled(groupIndices.indexOf(groupIndex) !== -1).onClick(async () => {
          if (groupIndices.length === 6)
            return;
          groupIndices == null ? void 0 : groupIndices.push(groupIndex);
          await reOpenModal(modal);
        })
      );
    }
  });
};
var pluginFeatureSubmenu = async (submenu, pluginItem, modal) => {
  submenu.addItem(
    (item) => item.setTitle("Plugin infos (i)").setIcon("text").onClick(() => {
      new DescriptionModal(
        modal.plugin.app,
        modal.plugin,
        pluginItem
      ).open();
    })
  );
  submenu.addItem(
    (item) => item.setTitle("Plugin github (g)").setIcon("github").onClick(async () => {
      await openGitHubRepo(pluginItem);
    })
  );
  const pluginSettings = modal.app.setting.openTabById(
    pluginItem.id
  );
  submenu.addSeparator();
  submenu.addItem(
    (item) => item.setTitle("Plugin settings (s)").setIcon("settings").setDisabled(!pluginSettings).onClick(async () => {
      await openPluginSettings(modal, pluginSettings);
    })
  );
  const condition = await getHkeyCondition(modal, pluginItem);
  submenu.addItem(
    (item) => item.setTitle("Modify hotkeys (h)").setIcon("plus-circle").setDisabled(!condition).onClick(async () => {
      await showHotkeysFor(modal, pluginItem);
    })
  );
};
async function openPluginSettings(modal, pluginItem) {
  const pluginSettings = modal.app.setting.openTabById(
    pluginItem.id
  );
  if (!pluginSettings) {
    new import_obsidian4.Notice("No settings on this plugin", 2500);
    return;
  }
  await modal.app.setting.open();
  await (pluginSettings == null ? void 0 : pluginSettings.display());
}
var showHotkeysFor = async function(modal, pluginItem) {
  const condition = await getHkeyCondition(modal, pluginItem);
  if (!condition) {
    new import_obsidian4.Notice("No HotKeys on this plugin", 2500);
    return;
  }
  await this.app.setting.open();
  await this.app.setting.openTabById("hotkeys");
  const tab = await this.app.setting.activeTab;
  tab.searchComponent.inputEl.value = pluginItem.name + ":";
  tab.updateHotkeyVisibility();
  tab.searchComponent.inputEl.blur();
};
var getCommandCondition = async function(modal, pluginItem) {
  var _a, _b;
  const pluginCommands = await ((_b = (_a = modal.app.setting.openTabById(
    pluginItem.id
  )) == null ? void 0 : _a.app) == null ? void 0 : _b.commands.commands);
  return pluginCommands;
};
var getHkeyCondition = async function(modal, pluginItem) {
  var _a, _b;
  const pluginCommands = await ((_b = (_a = modal.app.setting.openTabById(
    "command-palette"
  )) == null ? void 0 : _a.app) == null ? void 0 : _b.commands.commands);
  return hasKeyStartingWith(pluginCommands, pluginItem.id);
};
async function openGitHubRepo(plugin) {
  if ("repo" in plugin) {
    const repoURL = `https://github.com/${plugin.repo}`;
    window.open(repoURL, "_blank");
  } else {
    try {
      const response = await fetch(
        "https://raw.githubusercontent.com/obsidianmd/obsidian-releases/master/community-plugins.json"
      );
      const pluginsData = await response.json();
      const pluginData = pluginsData.find(
        (item) => item.id === plugin.id
      );
      if (pluginData && pluginData.repo) {
        const repoURL = `https://github.com/${pluginData.repo}`;
        window.open(repoURL, "_blank");
      } else {
        console.debug("Repo not found for the plugin.");
        try {
          const repoURL = `https://github.com/${plugin.author}/${plugin.id}`;
          window.open(repoURL, "_blank");
        } catch (e) {
          const repoURL = `https://github.com/${plugin.author}`;
          window.open(repoURL, "_blank");
          console.debug("Repo not found for the plugin.");
        }
      }
    } catch (error) {
      console.error("Error fetching plugin data:", error);
    }
  }
}
var searchDivButtons = (modal, contentEl) => {
  const span = contentEl.createEl(
    "span",
    {
      cls: "qps-toggle-plugins"
    },
    (el) => {
      commButton(modal, el);
      powerButton(modal, el);
    }
  );
};
var searchCommDivButton = (modal, contentEl) => {
  const span = contentEl.createEl(
    "span",
    {
      cls: "qps-toggle-plugins"
    },
    (el) => {
      commOptionButton(modal, el);
    }
  );
};
function handleDblClick(evt, modal) {
  var _a;
  const elementFromPoint = getElementFromMousePosition(evt, modal);
  const targetGroup = elementFromPoint == null ? void 0 : elementFromPoint.closest(
    ".qps-groups-name"
  );
  const targetBlock = elementFromPoint == null ? void 0 : elementFromPoint.closest(
    ".qps-comm-block"
  );
  if (targetGroup) {
    const groupName = targetGroup.textContent;
    const groupNumber = parseInt(
      (_a = groupName == null ? void 0 : groupName.match(/\((\d+)\)$/)) == null ? void 0 : _a[1]
    );
    editGroupName(modal, targetGroup, groupNumber);
  }
  if (targetBlock) {
    const matchingItem = findMatchingItem(modal, targetBlock);
    if (matchingItem) {
      new ReadMeModal(
        modal.plugin.app,
        modal,
        matchingItem
      ).open();
    }
  }
}
function handleContextMenu(evt, modal) {
  var _a;
  const elementFromPoint = getElementFromMousePosition(evt, modal);
  let targetBlock, targetGroup;
  targetGroup = elementFromPoint == null ? void 0 : elementFromPoint.closest(".qps-groups-name");
  if (!targetGroup) {
    if (modal instanceof QPSModal) {
      targetBlock = elementFromPoint == null ? void 0 : elementFromPoint.closest(
        ".qps-item-line"
      );
    } else {
      targetBlock = elementFromPoint == null ? void 0 : elementFromPoint.closest(
        ".qps-comm-block"
      );
    }
  }
  const groupName = targetGroup == null ? void 0 : targetGroup.textContent;
  const groupNumber = parseInt((_a = groupName == null ? void 0 : groupName.match(/\((\d+)\)$/)) == null ? void 0 : _a[1]);
  if (targetGroup) {
    groupMenu(evt, modal, groupNumber, targetGroup);
  }
  if (targetBlock) {
    if (modal instanceof QPSModal) {
      const matchingItem = findMatchingItem(modal, targetBlock);
      if (matchingItem) {
        contextMenuQPS(evt, modal, matchingItem);
      }
    } else {
      const matchingItem = findMatchingItem(modal, targetBlock);
      if (matchingItem) {
        contextMenuCPM(evt, modal, matchingItem);
      }
    }
  }
}
function contextMenuCPM(evt, modal, matchingItem) {
  evt.preventDefault();
  const menu = new import_obsidian4.Menu();
  menu.addItem((item) => {
    item.setTitle("Install plugin").setDisabled(isInstalled(matchingItem)).setIcon("log-in").onClick(async () => {
      await installLatestPluginVersion(modal, matchingItem);
      await reOpenModal(modal);
    });
  });
  menu.addItem((item) => {
    const isenabled = isEnabled(modal, matchingItem.id);
    item.setTitle(isenabled ? "Disable plugin" : "Enable plugin").setDisabled(!isInstalled(matchingItem)).setIcon(isenabled ? "poweroff" : "power").onClick(async () => {
      isEnabled(modal, matchingItem.id) ? await modal.app.plugins.disablePluginAndSave(
        matchingItem.id
      ) : await modal.app.plugins.enablePluginAndSave(
        matchingItem.id
      );
      const msg = isenabled ? "disabled" : "enabled";
      new import_obsidian4.Notice(`${matchingItem.name} ${msg}`, 2500);
    });
  });
  menu.addItem((item) => {
    item.setTitle("Uninstall plugin").setDisabled(!isInstalled(matchingItem)).setIcon("log-out").onClick(async () => {
      await this.app.plugins.uninstallPlugin(matchingItem.id);
      new import_obsidian4.Notice(`${matchingItem.name} uninstalled`, 2500);
      await reOpenModal(modal);
    });
  });
  menu.showAtMouseEvent(evt);
}
function contextMenuQPS(evt, modal, matchingItem) {
  const { plugin } = modal;
  const menu = new import_obsidian4.Menu();
  if (import_obsidian4.Platform.isDesktopApp) {
    menu.addItem(
      (item) => item.setTitle("Plugin folder (f)").setIcon("folder-open").onClick(async () => {
        await openDirectoryInFileManager(modal, matchingItem);
      })
    );
  }
  menu.addItem(async (item) => {
    item.setTitle("Plugin features").setIcon("package-plus");
    const submenu = item.setSubmenu();
    await pluginFeatureSubmenu(submenu, matchingItem, modal);
  });
  if (isInstalled(matchingItem)) {
    menu.addItem((item) => {
      item.setTitle("Uninstall plugin").setIcon("log-out").onClick(async () => {
        await this.app.plugins.uninstallPlugin(matchingItem.id);
        new import_obsidian4.Notice(`${matchingItem.name} uninstalled`, 2500);
        modal.plugin.getPluginsInfo();
        modal.plugin.getLength();
        await reOpenModal(modal);
      });
    });
  }
  if (matchingItem.id !== "quick-plugin-switcher") {
    menu.addSeparator();
    menu.addItem((item) => {
      item.setTitle("Add to group").setIcon("user");
      const submenu = item.setSubmenu();
      addToGroupSubMenu(submenu, matchingItem, modal);
    });
    menu.addItem((item) => {
      item.setTitle("Remove from group").setIcon("user-minus");
      const submenu = item.setSubmenu();
      submenu.addItem((subitem) => {
        subitem.setTitle("All groups").setDisabled(
          matchingItem.groupInfo.groupIndices.length === 0
        ).onClick(async () => {
          matchingItem.groupInfo.groupIndices;
          await rmvAllGroupsFromPlugin(modal, matchingItem);
        });
      });
      addRemoveItemGroupMenuItems(modal, submenu, plugin, matchingItem);
    });
  }
  menu.showAtMouseEvent(evt);
}
function getElementFromMousePosition(evt, modal) {
  if (modal.mousePosition) {
    const elementFromPoint = document.elementFromPoint(
      modal.mousePosition.x,
      modal.mousePosition.y
    );
    return elementFromPoint;
  }
  return null;
}
var groupMenu = (evt, modal, groupNumber, span) => {
  if (modal instanceof QPSModal && span) {
    groupMenuQPS(evt, modal, groupNumber, span);
  } else {
    groupMenuCPM(evt, modal, groupNumber);
  }
};
var groupMenuQPS = (evt, modal, groupNumber, span) => {
  const { plugin } = modal;
  const { settings } = plugin;
  const inGroup = getPluginsInGroup(modal, groupNumber);
  const menu = new import_obsidian4.Menu();
  menu.addItem(
    (item) => item.setTitle("Delay group").onClick(() => {
      const currentValue = (settings.groups[groupNumber].time || 0).toString();
      const input = createInput(span, currentValue);
      if (!input)
        return;
      const handleBlurOrEnter = () => {
        setTimeout(async () => {
          if (!modal.isDblClick) {
            const value = parseInt(input.value) || 0;
            settings.groups[groupNumber].time = value;
            span.textContent = `${value}`;
            if (modal instanceof CPModal) {
              await reOpenModal(modal);
            } else if (modal instanceof QPSModal) {
              await reOpenModal(modal);
            }
          }
        }, 100);
      };
      input.addEventListener("blur", handleBlurOrEnter);
      input.addEventListener("keydown", (event) => {
        if (event.key === "Enter") {
          handleBlurOrEnter();
        }
      });
    })
  );
  menu.addItem(
    (item) => item.setTitle("Apply").setDisabled(
      !inGroup.length || settings.groups[groupNumber].time === 0
    ).onClick(async () => {
      for (const plugin2 of inGroup) {
        plugin2.time = settings.groups[groupNumber].time;
        plugin2.delayed = true;
        settings.groups[groupNumber].applied = true;
        if (plugin2.enabled) {
          await modal.app.plugins.disablePluginAndSave(
            plugin2.id
          );
          await modal.app.plugins.enablePlugin(
            plugin2.id
          );
        }
        modal.plugin.saveSettings();
        await reOpenModal(modal);
      }
    })
  );
  menu.addItem(
    (item) => item.setTitle("Reset").setDisabled(
      !inGroup.length || settings.groups[groupNumber].time === 0
    ).onClick(async () => {
      for (const plugin2 of inGroup) {
        plugin2.time = 0;
        plugin2.delayed = false;
        settings.groups[groupNumber].applied = false;
        if (plugin2.enabled) {
          await modal.app.plugins.enablePluginAndSave(
            plugin2.id
          );
        }
        await reOpenModal(modal);
      }
      plugin.saveSettings();
    })
  );
  menu.addSeparator();
  const toEnable = inGroup.filter((i) => i.enabled === false);
  menu.addItem(
    (item) => item.setTitle("Enable all plugins in group").setDisabled(!inGroup.length || !toEnable.length).onClick(async () => {
      if (toEnable) {
        await Promise.all(
          toEnable.map(async (i) => {
            conditionalEnable(modal, i);
            i.enabled = true;
            modal.plugin.saveSettings();
          })
        );
        plugin.getLength();
        new import_obsidian4.Notice("All plugins enabled.", 2500);
        await modal.plugin.saveSettings();
        await reOpenModal(modal);
      }
    })
  );
  const toDisable = inGroup.filter((i) => i.enabled === true);
  menu.addItem(
    (item) => item.setTitle("Disable all plugins in group").setDisabled(!inGroup.length || !toDisable.length).onClick(async () => {
      if (toDisable) {
        await Promise.all(
          toDisable.map(async (i) => {
            modal.app.plugins.disablePluginAndSave(
              i.id
            );
            i.enabled = false;
          })
        );
        plugin.getLength();
        new import_obsidian4.Notice("All plugins disabled.", 2500);
        await modal.plugin.saveSettings();
        await reOpenModal(modal);
      }
    })
  );
  menu.addSeparator();
  createClearGroupsMenuItem(modal, menu, groupNumber);
  menu.showAtMouseEvent(evt);
};
var groupMenuCPM = (evt, modal, groupNumber) => {
  const menu = new import_obsidian4.Menu();
  menu.addItem((item) => {
    item.setTitle("Install & enable in group");
    item.onClick(async () => {
      const inGroup = getPluginsInGroup(
        modal,
        groupNumber
      );
      if (!inGroup.length)
        return;
      await installAllPluginsInGroup(modal, inGroup, true);
    });
  });
  menu.addItem((item) => {
    item.setTitle("Install plugins in group");
    item.onClick(async () => {
      const inGroup = getPluginsInGroup(
        modal,
        groupNumber
      );
      if (!inGroup.length)
        return;
      await installAllPluginsInGroup(modal, inGroup);
    });
  });
  menu.addItem((item) => {
    item.setTitle("Uninstall plugins in group");
    item.onClick(async () => {
      await uninstallAllPluginsInGroup(modal, groupNumber);
    });
  });
  menu.addSeparator();
  createClearGroupsMenuItem(modal, menu, groupNumber);
  menu.showAtMouseEvent(evt);
};
async function uninstallAllPluginsInGroup(modal, groupNumber) {
  const inGroup = getPluginsInGroup(modal, groupNumber);
  if (!inGroup.length)
    return;
  for (const plugin of inGroup) {
    if (!isInstalled(plugin))
      continue;
    await this.app.plugins.uninstallPlugin(plugin.id);
    new import_obsidian4.Notice(`${plugin.name} uninstalled`, 2500);
  }
  await reOpenModal(modal);
}
async function installAllPluginsInGroup(modal, pluginList, enable = false) {
  for (const plugin of pluginList) {
    if (isInstalled(plugin)) {
      new import_obsidian4.Notice(`${plugin.name} already installed`, 2500);
      continue;
    }
    await installLatestPluginVersion(modal, plugin);
    if (enable) {
      await modal.app.plugins.enablePluginAndSave(plugin.id);
      new import_obsidian4.Notice(`${plugin.name} enabled`, 2500);
    }
  }
  await reOpenModal(modal);
}
var findMatchingItem = (modal, targetBlock) => {
  var _a;
  if (modal instanceof QPSModal) {
    let itemName = targetBlock.children[1].value;
    if (itemName.startsWith("\u1D30")) {
      itemName = itemName.substring(1);
    }
    const matchingItem = modal.plugin.settings.allPluginsList.find(
      (item) => item.name === itemName
    );
    return matchingItem;
  } else {
    const itemName = (_a = targetBlock.firstChild) == null ? void 0 : _a.textContent;
    const cleanItemName = itemName == null ? void 0 : itemName.replace(/installed$/, "").trim();
    const matchingItem = modal.plugin.settings.commPlugins.find(
      (item) => item.name === cleanItemName
    );
    return matchingItem;
  }
};
var createClearGroupsMenuItem = (modal, menu, groupNumber) => {
  menu.addItem((item) => {
    const { plugin } = modal;
    item.setTitle("Clear group(s)").setIcon("user-minus");
    const submenu = item.setSubmenu();
    addRemoveGroupMenuItems(modal, submenu, groupNumber);
    submenu.addSeparator();
    submenu.addItem((subitem) => {
      subitem.setTitle("All groups").onClick(async () => {
        const confirmReset = await confirm(
          "Detach all groups from all plugins?",
          300
        );
        if (confirmReset) {
          if (modal instanceof QPSModal) {
            for (const i of plugin.settings.allPluginsList) {
              i.groupInfo.groupIndices = [];
            }
            await plugin.saveSettings();
            await reOpenModal(modal);
            new import_obsidian4.Notice(`All groups empty`, 2500);
          } else {
            const { settings } = modal.plugin;
            let { pluginsTagged, commPlugins: commPlugins2 } = settings;
            for (const item2 of commPlugins2) {
              delete pluginsTagged[item2.id];
            }
            await modal.plugin.saveSettings();
            await reOpenModal(modal);
            new import_obsidian4.Notice(`All groups empty`, 2500);
          }
        } else {
          new import_obsidian4.Notice("Operation cancelled", 2500);
        }
      });
    });
  });
};
async function installLatestPluginVersion(modal, plugin) {
  const pluginInfo = modal.plugin.settings.pluginStats[plugin.id];
  let latestVersion = null;
  for (const version in pluginInfo) {
    if (/^(v?\d+\.\d+\.\d+)$/.test(version)) {
      if (!latestVersion || version > latestVersion) {
        latestVersion = version;
      }
    }
  }
  if (!latestVersion) {
    console.debug("no last version?");
    return;
  }
  const manifest = await getManifest(plugin);
  await this.app.plugins.installPlugin(plugin.repo, latestVersion, manifest);
}

// src/main_modal.ts
var QPSModal = class extends import_obsidian5.Modal {
  constructor(app2, plugin) {
    super(app2);
    this.plugin = plugin;
    this.searchTyping = true;
    this.isDblClick = false;
    this.pressed = false;
    this.searchInit = true;
    this.addHeader = (contentEl) => {
      const { plugin } = this;
      const { settings } = plugin;
      new import_obsidian5.DropdownComponent(contentEl).addOptions({
        all: `All(${plugin.lengthAll})`,
        enabled: `Enabled(${plugin.lengthEnabled})`,
        disabled: `Disabled(${plugin.lengthDisabled})`,
        enabledFirst: `Enabled First(${plugin.lengthAll})`,
        mostSwitched: `Most Switched(${plugin.lengthAll})`,
        byGroup: `By Group`
      }).setValue(settings.filters).onChange(async (value) => {
        settings.filters = value;
        await plugin.saveSettings();
        await reOpenModal(this);
      });
      mostSwitchedResetButton(this, contentEl);
      byGroupDropdowns(this, contentEl);
    };
    this.addDelay = async (pluginItem, input) => {
      pluginItem.delayed = true;
      pluginItem.time = parseInt(input.value) || 0;
      if (pluginItem.time === 0) {
        pluginItem.delayed = false;
      }
      if (pluginItem.delayed && pluginItem.enabled) {
        delayedReEnable(this, pluginItem);
      }
      await this.plugin.saveSettings();
      await reOpenModal(this);
    };
    this.plugin = plugin;
  }
  container() {
    const { contentEl } = this;
    this.modalEl.addClass("qps-modal");
    this.header = contentEl.createEl("div", {
      cls: "qps-header"
    });
    this.search = contentEl.createEl("div", { cls: "qps-search" });
    this.groups = contentEl.createEl("div", { cls: "qps-groups" });
    this.hotkeysDesc = contentEl.createEl("p", { cls: "qps-hk-desc" });
    this.items = contentEl.createEl("div", { cls: "qps-items" });
    this.modalEl.addEventListener("mousemove", (event) => {
      this.mousePosition = { x: event.clientX, y: event.clientY };
    });
    document.addEventListener("keydown", (event) => {
      handleKeyDown2(event, this);
    });
    this.modalEl.addEventListener("contextmenu", (evt) => {
      if (this.isDblClick)
        return;
      handleContextMenu(evt, this);
    });
    this.modalEl.addEventListener("dblclick", (evt) => {
      if (this.isDblClick)
        return;
      handleDblClick(evt, this);
    });
  }
  async onOpen() {
    const { plugin, contentEl } = this;
    const { settings } = plugin;
    if (this.searchInit)
      settings.search = "";
    else
      this.searchInit = true;
    contentEl.empty();
    this.container();
    setGroupTitle(this, plugin, Groups, settings.numberOfGroups);
    this.addHeader(this.header);
    await addSearch(this, this.search, "Search plugins");
    searchDivButtons(this, this.search);
    this.addGroups(this, this.groups);
    if (settings.showHotKeys)
      this.setHotKeysdesc();
    await this.addItems();
  }
  addGroups(modal, contentEl) {
    const groups = Object.values(Groups);
    for (let i = 1; i < groups.length; i++) {
      const groupKey = groups[i];
      contentEl.createEl(
        "span",
        {
          cls: "qps-group-span-container"
        },
        (cont) => {
          cont.createEl(
            "span",
            {
              cls: "qps-circle-title-group"
            },
            (el) => {
              circleCSSModif2(this, el, i);
            }
          );
          const span = cont.createEl("span", {
            cls: "qps-groups-name",
            text: `${groupKey}`
          });
          const groupNumberText = `(<span class="shortcut-number">${i}</span>)`;
          span.insertAdjacentHTML("beforeend", groupNumberText);
        }
      );
    }
  }
  setHotKeysdesc() {
    const numberOfGroups = this.plugin.settings.numberOfGroups;
    this.hotkeysDesc.createSpan(
      {
        text: `(1-${numberOfGroups})\u2795 (0)\u274C (f)\u{1F4C1} `
      },
      (el) => {
        el.createSpan({ text: "(g)" }, (el2) => {
          let gitHubIcon = el2.createSpan({ cls: "git-hub-icon" });
          (0, import_obsidian5.setIcon)(gitHubIcon, "github");
        });
        el.createSpan({
          text: ` (i)\u2139\uFE0F (s)\u2699\uFE0F (h)\u2328\uFE0F `
        });
        el.createSpan({
          cls: "qps-hk-desc-last-part",
          text: `(\u{1F5B1}\uFE0Fx2)delay`
        });
      }
    );
  }
  async addItems() {
    const { plugin } = this;
    const { settings } = plugin;
    const { allPluginsList } = settings;
    const value = settings.search;
    let listItems = doSearch(this, value, allPluginsList);
    listItems = modeSort(plugin, listItems);
    for (const pluginItem of listItems) {
      if (settings.filters === "enabled" && !pluginItem.enabled || settings.filters === "disabled" && pluginItem.enabled) {
        continue;
      }
      let itemContainer = this.items.createEl("div", {
        cls: "qps-item-line"
      });
      itemTogglePluginButton(this, pluginItem, itemContainer);
      const input = itemTextComponent(pluginItem, itemContainer);
      itemToggleClass(this, pluginItem, itemContainer);
      input.readOnly = true;
      addGroupCircles2(input, pluginItem);
      itemContainer.addEventListener("dblclick", async (evt) => {
        if (pluginItem.id === "quick-plugin-switcher")
          return;
        const { plugin: plugin2 } = this;
        const currentValue = pluginItem.time.toString();
        this.isDblClick = true;
        if (!itemContainer) {
          return;
        }
        const input2 = createInput(itemContainer, currentValue);
        if (!pluginItem.delayed) {
          input2 == null ? void 0 : input2.addEventListener("keydown", async (event) => {
            if (event.key === "Enter") {
              setTimeout(async () => {
                this.addDelay(pluginItem, input2);
                this.isDblClick = false;
              }, 100);
            }
          });
          input2 == null ? void 0 : input2.addEventListener("blur", () => {
            setTimeout(async () => {
              this.addDelay(pluginItem, input2);
              this.isDblClick = false;
            }, 100);
          });
        } else {
          pluginItem.delayed = false;
          await this.app.plugins.enablePluginAndSave(
            pluginItem.id
          );
          this.isDblClick = false;
          await plugin2.saveSettings();
          await reOpenModal(this);
        }
      });
    }
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
    document.removeEventListener("mousemove", (event) => {
      this.mousePosition = { x: event.clientX, y: event.clientY };
    });
    document.removeEventListener("keydown", (event) => {
      handleKeyDown2(event, this);
    });
    this.modalEl.removeEventListener("contextmenu", (evt) => {
      if (this.isDblClick)
        return;
      handleContextMenu(evt, this);
    });
    this.modalEl.removeEventListener("dblclick", (evt) => {
      if (this.isDblClick)
        return;
      handleDblClick(evt, this);
    });
  }
};
function circleCSSModif2(modal, el, groupIndex) {
  const { settings } = modal.plugin;
  const { color } = getEmojiForGroup(groupIndex);
  el.style.backgroundColor = color;
  el.textContent = (settings.groups[groupIndex].time ? settings.groups[groupIndex].time : "").toString();
}
var itemTogglePluginButton = (modal, pluginItem, itemContainer) => {
  let disable = pluginItem.id === "quick-plugin-switcher";
  const toggleButton = new import_obsidian5.ToggleComponent(itemContainer).setValue(pluginItem.enabled).setDisabled(disable).onChange(async () => {
    modal.searchInit = false;
    await togglePlugin(modal, pluginItem);
  });
};
var addGroupCircles2 = (input, item) => {
  const indices = item.groupInfo.groupIndices;
  if (!indices.length)
    return;
  if (indices.length < 3) {
    const content = getCirclesItem(indices);
    input.insertAdjacentHTML("afterend", content);
  }
  if (indices.length >= 3 && indices.length < 5) {
    const [valeur0, valeur1, ...part2] = indices;
    const part1 = [valeur0, valeur1];
    const content1 = getCirclesItem(part1);
    input.insertAdjacentHTML("afterend", content1);
    const content2 = getCirclesItem(part2);
    input.insertAdjacentHTML("afterend", content2);
  } else if (indices.length >= 5) {
    const [valeur0, valeur1, valeur2, valeur3, ...part3] = indices;
    const part1 = [valeur0, valeur1];
    const part2 = [valeur2, valeur3];
    const content1 = getCirclesItem(part1);
    input.insertAdjacentHTML("afterend", content1);
    const content2 = getCirclesItem(part2);
    input.insertAdjacentHTML("afterend", content2);
    const content3 = getCirclesItem(part3);
    input.insertAdjacentHTML("afterend", content3);
  }
};
function handleKeyDown2(event, modal) {
  const elementFromPoint = getElementFromMousePosition(event, modal);
  const pluginItemBlock = elementFromPoint == null ? void 0 : elementFromPoint.closest(
    ".qps-item-line"
  );
  if (pluginItemBlock) {
    modal.searchTyping = false;
    const matchingItem = findMatchingItem(modal, pluginItemBlock);
    if (matchingItem) {
      handleHotkeysQPS(modal, event, matchingItem);
    }
  } else {
    modal.searchTyping = true;
  }
}
var handleHotkeysQPS = async (modal, evt, pluginItem) => {
  const { plugin } = modal;
  const { settings } = plugin;
  const numberOfGroups = settings.numberOfGroups;
  const KeyToSettingsMap = {
    g: async () => await openGitHubRepo(pluginItem),
    s: async () => await openPluginSettings(modal, pluginItem),
    h: async () => await showHotkeysFor(modal, pluginItem),
    i: () => new DescriptionModal(plugin.app, plugin, pluginItem).open()
  };
  if (import_obsidian5.Platform.isDesktopApp)
    KeyToSettingsMap["f"] = async () => await openDirectoryInFileManager(modal, pluginItem);
  const keyPressed = evt.key;
  const itemID = pluginItem.id;
  const taggedItem = settings.pluginsTagged[itemID];
  if (!taggedItem) {
    settings.pluginsTagged[itemID] = {
      groupInfo: { groupIndices: [] }
    };
    await modal.plugin.saveSettings();
    await reOpenModal(modal);
  }
  if (!taggedItem || modal.pressed) {
    return;
  }
  pressDelay(modal);
  if (modal.isDblClick)
    return;
  const groupIndices = pluginItem.groupInfo.groupIndices;
  const key = parseInt(keyPressed);
  if (key > 0 && key <= numberOfGroups && !(pluginItem.id === "quick-plugin-switcher")) {
    if (groupIndices.length === 6)
      return;
    const index = groupIndices.indexOf(key);
    if (index === -1) {
      groupIndices == null ? void 0 : groupIndices.push(key);
      await plugin.saveSettings();
      await reOpenModal(modal);
    }
  } else if (keyPressed in KeyToSettingsMap) {
    KeyToSettingsMap[keyPressed]();
  } else if ((keyPressed === "Delete" || keyPressed === "Backspace" || keyPressed === "0") && !(pluginItem.id === "quick-plugin-switcher")) {
    if (!groupIndices.length)
      return;
    if (groupIndices.length === 1) {
      const groupIndex = groupIndices[0];
      pluginItem.groupInfo.groupIndices = [];
      if (!groupNotEmpty(groupIndex, modal)) {
        settings.selectedGroup = "SelectGroup";
      }
      await plugin.saveSettings();
      await reOpenModal(modal);
    } else {
      const menu = new import_obsidian5.Menu();
      menu.addItem(
        (item) => item.setTitle("Remove item group(s)").setDisabled(true).setDisabled(true)
      );
      menu.addSeparator();
      menu.addItem(
        (item) => item.setTitle("All").onClick(async () => {
          await rmvAllGroupsFromPlugin(modal, pluginItem);
        })
      );
      for (const groupIndex of groupIndices) {
        const { emoji } = getEmojiForGroup(groupIndex);
        menu.addItem(
          (item) => item.setTitle(`${emoji} group ${groupIndex}`).onClick(async () => {
            pluginItem.groupInfo.groupIndices = removeItem(
              pluginItem.groupInfo.groupIndices,
              groupIndex
            );
            await plugin.saveSettings();
            await reOpenModal(modal);
          })
        );
      }
      menu.showAtPosition(modal.mousePosition);
    }
  }
};

// src/settings.ts
var import_obsidian6 = require("obsidian");
var QPSSettingTab = class extends import_obsidian6.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    const { plugin } = this;
    const { settings } = plugin;
    containerEl.empty();
    containerEl.createEl("h4", { text: "Quick Plugin Switcher" });
    let saveSettingsTimeout;
    const { numberOfGroups, numberOfGroupsComm } = settings;
    new import_obsidian6.Setting(containerEl).setName("Number of plugins groups").setDesc("To treat plugins by groups").addSlider((slider) => {
      slider.setLimits(1, 6, 1).setValue(numberOfGroups).setDynamicTooltip().onChange(async (value) => {
        if (value < numberOfGroups) {
          clearTimeout(saveSettingsTimeout);
          saveSettingsTimeout = setTimeout(async () => {
            const confirmReset = await confirm(
              "reducing number of groups, higher groups info will be lost",
              350
            );
            if (confirmReset) {
              settings.allPluginsList.forEach(
                (plugin2) => {
                  let hasValueGreaterThanValue = false;
                  for (const groupIndex of plugin2.groupInfo.groupIndices) {
                    if (groupIndex > value) {
                      hasValueGreaterThanValue = true;
                      break;
                    }
                  }
                  if (hasValueGreaterThanValue) {
                    plugin2.groupInfo.groupIndices = [];
                  }
                }
              );
              settings.numberOfGroups = value;
              await plugin.saveSettings();
            } else {
              slider.setValue(numberOfGroups);
            }
          }, 700);
        } else {
          clearTimeout(saveSettingsTimeout);
          settings.numberOfGroups = value;
          await plugin.saveSettings();
        }
      });
    });
    new import_obsidian6.Setting(containerEl).setName("Number of community plugins groups").setDesc("To treat plugins by groups").addSlider((slider) => {
      slider.setLimits(1, 6, 1).setValue(numberOfGroupsComm).setDynamicTooltip().onChange(async (value) => {
        if (value < numberOfGroupsComm) {
          clearTimeout(saveSettingsTimeout);
          saveSettingsTimeout = setTimeout(async () => {
            const confirmReset = await confirm(
              "reducing number of groups, higher groups info will be lost",
              350
            );
            if (confirmReset) {
              const { commPlugins: commPlugins2, pluginsTagged } = settings;
              commPlugins2.forEach((plugin2) => {
                let hasValueGreaterThanValue = false;
                const taggedItem = pluginsTagged[plugin2.id];
                if (!taggedItem)
                  return;
                const { groupInfo } = taggedItem;
                let { groupIndices } = groupInfo;
                for (const groupIndex of groupIndices) {
                  if (groupIndex > value) {
                    hasValueGreaterThanValue = true;
                    break;
                  }
                }
                if (hasValueGreaterThanValue) {
                  groupIndices = [];
                }
              });
              settings.numberOfGroupsComm = value;
              await plugin.saveSettings();
            } else {
              slider.setValue(numberOfGroupsComm);
            }
          }, 700);
        } else {
          clearTimeout(saveSettingsTimeout);
          settings.numberOfGroupsComm = value;
          await plugin.saveSettings();
        }
      });
    });
    new import_obsidian6.Setting(containerEl).setName("Reset all values").setDesc("Don't do this, unless you really need to").addButton((btn) => {
      btn.setIcon("alert-octagon").setTooltip("Reset all values").onClick(async () => {
        const confirmReset = await confirm(
          "Do you want to reset all values?",
          300
        );
        if (confirmReset) {
          if (plugin.settings.hasOwnProperty("allPluginsList")) {
            plugin.settings.allPluginsList = [];
          }
          if (plugin.settings.hasOwnProperty("groups")) {
            plugin.settings.groups = {};
          }
          await plugin.saveSettings();
          new import_obsidian6.Notice("Reset done", 2500);
        } else {
          new import_obsidian6.Notice("Operation cancelled", 2500);
        }
      });
    });
    new import_obsidian6.Setting(containerEl).setName("Show hotkeys line reminder").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showHotKeys).onChange((value) => {
        this.plugin.settings.showHotKeys = value;
        this.plugin.saveSettings();
      });
    });
  }
};

// src/main.ts
var QuickPluginSwitcher = class extends import_obsidian7.Plugin {
  constructor() {
    super(...arguments);
    this.reset = false;
    this.lengthAll = 0;
    this.lengthDisabled = 0;
    this.lengthEnabled = 0;
  }
  async onload() {
    await this.loadSettings();
    this.app.workspace.onLayoutReady(async () => {
      const { settings } = this;
      const allPluginsList = settings.allPluginsList || [];
      const manifests = this.app.plugins.manifests || {};
      let stillInstalled = [];
      for (const plugin of allPluginsList) {
        if (Object.keys(manifests).includes(plugin.id))
          stillInstalled.push(plugin);
      }
      const { wrapper1, wrapper2 } = this.wrapDisableEnablePluginAndSave(
        stillInstalled,
        async () => {
          await this.saveSettings();
        }
      );
      this.register(wrapper1);
      this.register(wrapper2);
      for (const plugin of stillInstalled) {
        if (isEnabled(this, plugin.id) !== plugin.enabled && !plugin.delayed) {
          plugin.enabled = !plugin.enabled;
        }
      }
      await this.saveSettings();
      for (const pluginItem of stillInstalled) {
        if (pluginItem.delayed && pluginItem.enabled) {
          const time = pluginItem.time * 1e3 || 0;
          setTimeout(
            async () => await this.app.plugins.enablePlugin(
              pluginItem.id
            ),
            time
          );
        }
      }
    });
    this.addSettingTab(new QPSSettingTab(this.app, this));
    this.addRibbonIcon(
      "toggle-right",
      "Quick Plugin Switcher",
      async (evt) => {
        this.getPluginsInfo();
        this.getLength();
        new QPSModal(this.app, this).open();
        await exeAfterDelay(this, this.commPluginsInfo.bind(this));
      }
    );
    this.addCommand({
      id: "quick-plugin-switcher-modal",
      name: "open modal",
      callback: async () => {
        this.getPluginsInfo();
        this.getLength();
        new QPSModal(this.app, this).open();
        await exeAfterDelay(this, this.commPluginsInfo.bind(this));
      }
    });
  }
  wrapDisableEnablePluginAndSave(stillInstalled, cb) {
    const manifests = this.app.plugins.manifests || {};
    const wrapper1 = around(this.app.plugins, {
      disablePluginAndSave(oldMethod) {
        return async function(pluginId) {
          if (stillInstalled) {
            const plugin = stillInstalled.find(
              (plugin2) => plugin2.id === pluginId && !isEnabled(this, manifests[pluginId].id)
            );
            if (plugin && plugin.delayed && plugin.time > 0) {
              plugin.enabled = false;
              cb();
            }
          }
          return oldMethod.call(this, pluginId);
        };
      }
    });
    const wrapper2 = around(this.app.plugins, {
      enablePluginAndSave(oldMethod) {
        return async function(pluginId) {
          let altReturn = false;
          if (stillInstalled) {
            const plugin = stillInstalled.find(
              (plugin2) => plugin2.id === pluginId && isEnabled(this, manifests[pluginId].id)
            );
            if (plugin && plugin.delayed && plugin.time > 0) {
              plugin.enabled = true;
              altReturn = true;
              cb();
            }
          }
          if (altReturn)
            return this.app.plugins.enablePlugin.call(
              this,
              pluginId
            );
          return oldMethod.call(this, pluginId);
        };
      }
    });
    return { wrapper1, wrapper2 };
  }
  async getPluginsInfo() {
    const { settings } = this;
    const allPluginsList = settings.allPluginsList || [];
    const manifests = this.app.plugins.manifests || {};
    let stillInstalled = [];
    let uninstalled = [];
    for (const plugin of allPluginsList) {
      if (Object.keys(manifests).includes(plugin.id))
        stillInstalled.push(plugin);
      else {
        uninstalled.push(plugin);
      }
    }
    for (const key of Object.keys(manifests)) {
      const pluginInList = stillInstalled.find(
        (plugin) => plugin.id === manifests[key].id
      );
      if (pluginInList) {
        if (isEnabled(this, manifests[key].id) !== pluginInList.enabled && !pluginInList.delayed) {
          pluginInList.enabled = !pluginInList.enabled;
        } else if (pluginInList.delayed && isEnabled(this, manifests[key].id) !== pluginInList.enabled) {
          if (isEnabled(this, manifests[key].id)) {
            pluginInList.enabled = true;
            await this.app.plugins.disablePluginAndSave(
              pluginInList.id
            );
            await this.app.plugins.enablePlugin(
              pluginInList.id
            );
            pluginInList.switched++;
          }
        }
        if (pluginInList.desktopOnly === void 0) {
          pluginInList.desktopOnly = manifests[key].isDesktopOnly || false;
        }
        continue;
      } else {
        const notInListInfo = {
          name: manifests[key].name || "",
          id: manifests[key].id || "",
          desc: manifests[key].description || "",
          dir: manifests[key].dir || "",
          version: manifests[key].version || "",
          author: manifests[key].author || "",
          authorUrl: manifests[key].authorUrl || "",
          desktopOnly: manifests[key].isDesktopOnly || false,
          enabled: isEnabled(this, manifests[key].id) || false,
          switched: 0,
          groupInfo: {
            groupIndices: [],
            groupWasEnabled: false
          },
          delayed: false,
          time: 0
        };
        stillInstalled.push(notInListInfo);
      }
    }
    settings.allPluginsList = stillInstalled;
    await this.saveSettings();
    this.getLength();
  }
  getLength() {
    const { settings } = this;
    const allPluginsList = settings.allPluginsList || [];
    this.lengthAll = allPluginsList.length;
    this.lengthEnabled = settings.allPluginsList.filter(
      (plugin) => plugin.enabled
    ).length;
    this.lengthDisabled = settings.allPluginsList.filter(
      (plugin) => !plugin.enabled
    ).length;
  }
  async commPluginsInfo() {
    console.debug("fetching'''''''''''''''''''''''''");
    let plugins, stats;
    try {
      plugins = await fetchData(commPlugins);
      stats = await fetchData(commPluginStats);
    } catch (e) {
      return false;
    }
    if (plugins || stats) {
      this.settings.commPlugins = plugins;
      this.settings.pluginStats = stats;
      await this.saveSettings();
      console.debug("fetched");
      return true;
    }
    return false;
  }
  async loadSettings() {
    const previousSettings = { ...await this.loadData() };
    if ("mobileSettings" in previousSettings) {
      delete previousSettings.mobileSettings;
    }
    this.settings = { ...DEFAULT_SETTINGS, ...previousSettings };
    this.settings.savedVersion = this.manifest.version;
    await this.saveSettings();
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var exeAfterDelay = async (_this, func) => {
  const { settings } = _this;
  const currentTime = Date.now();
  if (currentTime - settings.lastFetchExe >= 18e4) {
    const ret = await func();
    if (ret === true) {
      settings.lastFetchExe = currentTime;
      await _this.saveSettings();
    } else {
      console.log("community plugins udpate failed, check your connexion");
    }
  } else {
    console.log(
      "fetched less than 3 min, community plugins not updated"
    );
  }
};
//# sourceMappingURL=data:application/json;base64,
